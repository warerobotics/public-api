schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

# Pagination direction
enum Pagination {
    NEXT
    PREV
}

# Inventory or location record's status filter
enum RecordStatusFilter {
    EXCEPTION
    AUDIT
    RESOLVED
}

# Inventory or location record's user applied status
enum RecordUserStatus {
    AUDIT
    RESOLVED
}

# Location filter
input LocationFilter {
    # full or partial location name string to match on, null to not apply
    locationName: String
    # starting aisle in aisle range inclusive filter, null to not apply
    aisleStart: String
    # ending aisle in the aisle range inclusive filter, null to not apply
    aisleEnd: String
    # occupancy flag, set to true to filter on occupied bin location, false to filter on empty, null to not apply
    occupancy: Boolean
    # list of enum values to inclusive filter on bin record status, null to not apply
    statusFilter: [RecordStatusFilter]
}

type Query {
    # Get information about the warehouse zones accessible by the currently logged in user
    myInfo: User!
    # Get a page of records from the latest scanned location records for a zone
    zoneLocationsPage(
        # zone identifier
        zoneId: String!,
        # number of rows per page, if null, defaults to 10
        limit: Int,
        # cursor from PageInfo to paginate, if null, set to the first of the total records
        cursor: String,
        # pagination direction, if null, defaults to NEXT
        paginate: Pagination,
        # filter, if null, no filter is applied
        filter: LocationFilter): ZoneLocationsPage
    # Get a single record for a WMS Location History Upload
    wmsLocationHistoryUploadRecord(
        # id that was originally returned when the upload job was created
        id: String!): WMSLocationHistoryUpload
}

type Mutation {
    # Initiate the WMS import process for a given zone
    createWMSLocationHistoryUpload(
        # Zone identifier
        zoneId: String!,
        format: WMSUploadFormat
    ): CreateWMSLocationHistoryUploadResult
    createWMSLocationHistoryRecords(
        zoneId: String!
        records: [WMSLocationHistoryRecord]!
    ): CreateWMSLocationHistoryUploadResult
    # Clear a required action for a drone
    resetDroneRequiredAction(
      # Required action identifier
      requiredActionId: String!
    ): WarehouseRobotSystems
}

type Subscription {
    subscribeWMSLocationHistoryUploadStatusChange(id: String!): WMSLocationHistoryUpload
}

# User accessible zone lists
type User {
    # Nested list of zones grouped under warehouse under organization
    organizations: [Organization]
}

type Organization {
    name: String!
    warehouses: [Warehouse]
}

type Warehouse {
    id: String!
    name: String!
    zones: [Zone]
}

# Information about a zone
type Zone {
    # zone identifier
    id: String!
    # zone name
    name: String!
    # ordered list of aisle names
    aisles: [String]!
}

# Meta-data about a page of records
type PageInfo {
    # total number of records to page through
    totalRecords: Int!
    # index of the first item in the returned BinPallet list. Index count starts at 0
    startIndex: Int
    # cursor token used to paginate to the prev page, use only if hasPrevPage is true
    startCursor: String
    # cursor token used to paginate to the next page, use only if hasNextPage is true
    endCursor: String
    hasNextPage: Boolean
    hasPrevPage: Boolean
}

# One inventory or location exception/issue
type RecordException {
    # type of issue detected
    type: String
    # longer description of the issue
    description: String
}

# Reference to an inventory record associated with an LPN
type InventoryReference {
    lpn: String!
    recordId: String!
}

# One location record
type LocationRecord {
    # record identifier
    recordId: String!
    # warehouse aisle
    aisle: String!
    # bin location name, unique within a warehouse zone
    binName: String!
    # location record timestamp
    timestamp: String!
    # list of inventory references in this location, empty list if no inventory detected in this location
    inventory: [InventoryReference]!
    # list of location exceptions, empty list if no exceptions
    exceptions: [RecordException]!
    # user applied status, null if no user status applied to this record
    userStatus: RecordUserStatus
}

type LocationPageItem {
    # cursor token for this record
    cursor: String
    # inventory record
    record: LocationRecord
}

# A page from the latest scanned location records for a zone
type ZoneLocationsPage {
    # zone identifier
    zoneId: String!
    # IANA/Olson timezone string for the record timestamps
    timezone: String!
    # page list of inventory page items
    records: [LocationPageItem]
    # meta-data about the page list
    pageInfo: PageInfo
}

# Return result from createWMSLocationHistoryUpload
type CreateWMSLocationHistoryUploadResult {
    # WMSUploadID to be used with subscriptions and status lookup
    id: String!
    # Pre-Signed S3 URL to use for uploading the payload file
    uploadUrl: String!
    # JSON-encoded string of accompanying fields that need to be passed with the uploadUrl when performing a POST
    uploadFields: String!
}

enum WMSUploadStatus {
    PENDING_UPLOAD
    PROCESSING
    SUCCESS
    FAILURE
}

enum WMSUploadFormat {
    CSV
    XLSX
}

# Data type that mirrors what is stored in the database
type WMSLocationHistoryUpload {
    # WMSUploadID that can be used for subscriptions
    id: String!
    # Zone that this upload was done against
    zoneId: String!
    # User Id of the user who submitted the upload
    userId: String!

    # Total number of records in the upload, calculated after initial upload
    totalRecords: Int
    # Number of records the processing function has sucessfully processed
    processedRecords: Int
    # Number of records the processing function has skipped due to non-matching location name
    skippedRecords: Int
    # Number of records the processing function has attempted to process and encountered a failure
    failedRecords: Int
    # Overall status of the processing workflow
    status: WMSUploadStatus
    # Created timestamp
    created: String!
    # Updated timestamp.  As the processing function performs work, this value changes
    updated: String!
}

input WMSLocationHistoryRecord {
    Location: String!
    LPN: String
}

type WarehouseRobotSystems {
  warehouseId: String!
  nests: [Nest]!
}

type Nest {
  id: String!
  name: String!
  drone: Drone
}

type Drone {
  id: String!
  name: String!
  requiredActions: [DroneRequiredAction]!
  flightAllowed: Boolean
}

type DroneRequiredAction {
  id: String!
  shortName: String!
  description: String!
  docsUrl: String!
  # If action is non-null, user must call a mutation to clear this required action
  action: String
}
